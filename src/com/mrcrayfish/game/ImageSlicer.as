/* * copyright (c) 2009 MDBitz - Matthew Denton <matt@mdbitz.com> * * ImageSlicer is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * ImageSlicer is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with ImageSlicer. If not, see <http://www.gnu.org/licenses/>. */package{        /*     * import statements     */    import flash.display.Bitmap;    import flash.display.BitmapData;    import flash.geom.Point;    import flash.geom.Rectangle; 	    import flash.errors.IllegalOperationError;    import flash.display.Shape;    /**     * Image Slicer Util     * @author MDBitz - Matthew Denton <matt@mdbitz.com>     */    public class ImageSlicer    {        /**         * Creates a new ImageSlicer         *         * @constructor         * @throws IllegalOperationError         */        public function ImageSlicer() {            throw new IllegalOperationError('ImageSlicer cannot be instantiated.');        }                /**         * Slice bitmap into a grid of bitmaps specified by row and column count         *         * @param image Bitmap to be sliced         * @param numRows number of rows in resulting grid         * @param numColumns number of columns in resulting grid         * @return 2Dimensional Array of bitmaps         */         public static function sliceImage(image:Bitmap):Array        {            var iWidth:Number = 256;            var iHeight:Number = 256;            var pWidth:Number = 16;            var pHeight:Number = 16;            var iArray:Array = new Array();                        var rectangle:Rectangle;            var bitmap:Bitmap;            var bData:BitmapData;			            for( var rowIdx:int = 0; rowIdx < 16; rowIdx++ ) {                iArray[rowIdx] = new Array();                for( var colIdx:int = 0; colIdx < 16; colIdx++ ) {                    bData = new BitmapData( pWidth, pHeight, true, 0x00000000 );                    rectangle = new Rectangle( colIdx * pWidth, rowIdx * pHeight, pWidth, pHeight );                    bData.copyPixels( image.bitmapData, rectangle, new Point( 0, 0 ) );                    bitmap = new Bitmap( bData );                    iArray[rowIdx][colIdx] = bitmap;                }            }            return iArray;        }        /**         * Slice bitmap into an array of bitmaps specified by number of Columns         *         * @param image Bitmap to be sliced         * @param numColumns number of columns in resulting array         * @return Array of bitmaps         */         public static function sliceImageVertical(image:Bitmap):Array        {            var iArray:Array = sliceImage(image);            return iArray[0];        }        /**         * Slice bitmap into an array of bitmaps specified by number of Rows         *         * @param image Bitmap to be sliced         * @param numRows number of rows in resulting array         * @return Array of bitmaps         */         public static function sliceImageHorizontal(image:Bitmap):Array        {            var iArray:Array = sliceImage(image);            var hArray:Array = new Array();            for( var rowIdx:int = 0; rowIdx < 16; rowIdx++ ) {                hArray[rowIdx] = iArray[rowIdx][0];		}            return hArray;        }    } //-- class} //--package